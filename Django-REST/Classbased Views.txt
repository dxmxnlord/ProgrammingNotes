+ REST framework provides an APIView class, which subclasses Django's View class. Using the APIView class is pretty much the same as using a regular View class, as usual, the incoming request is dispatched to an appropriate handler method such as .get() or .post(). Additionally, a number of attributes may be set on the class that control various aspects of the API policy. APIView classes are different from regular View classes in the following ways:

	++ Requests passed to the handler methods will be REST framework's Request instances, not Django's HttpRequest instances.
	++ Handler methods may return REST framework's Response, instead of Django's HttpResponse. The view will manage content negotiation and setting the correct renderer on the response.
	++ Any APIException exceptions will be caught and mediated into appropriate responses.
	++ Incoming requests will be authenticated and appropriate permission and/or throttle checks will be run before dispatching the request to the handler method.

[[
	from rest_framework.views import APIView
	from rest_framework.response import Response
	from rest_framework import authentication, permissions
	from django.contrib.auth.models import User

	class ListUsers(APIView):
	    """
	    View to list all users in the system.

	    * Requires token authentication.
	    * Only admin users are able to access this view.
	    """
	    authentication_classes = [authentication.TokenAuthentication]
	    permission_classes = [permissions.IsAdminUser]

	    def get(self, request, format=None):
	        """
	        Return a list of all users.
	        """
	        usernames = [user.username for user in User.objects.all()]
	        return Response(usernames)
]]

+ the API policy attributes include :

	.renderer_classes
	.parser_classes
	.authentication_classes
	.throttle_classes
	.permission_classes
	.content_negotiation_class

+ the API policy instantiation methods include :

	.get_renderers(self)
	.get_parsers(self)
	.get_authenticators(self)
	.get_throttles(self)
	.get_permissions(self)
	.get_content_negotiator(self)
	.get_exception_handler(self)

+ the API policy implementation methods include :

	.check_permissions(self, request)
	.check_throttles(self, request)
	.perform_content_negotiation(self, request, force=False)

+ the dispatch methods are :

	++ they are called by the .dispatch() method. These perform any actions that need to occur before or after calling the handler methods. 

	.initial(self, request, *args, **kwargs)
		++ Performs any actions that need to occur before the handler method gets called. This method is used to enforce permissions and throttling, and perform content negotiation.

	.handle_exception(self, exc)
		++ Any exception thrown by the handler method will be passed to this method, which either returns a Response instance, or re-raises the exception. The default implementation handles any subclass of rest_framework.exceptions.APIException, as well as Django's Http404 and PermissionDenied exceptions, and returns an appropriate error response. If you need to customize the error responses your API returns you should subclass this method

	.initialize_request(self, request, *args, **kwargs)
		++ Ensures that the request object that is passed to the handler method is an instance of Request, rather than the usual Django HttpRequest.

	.finalize_response(self, request, response, *args, **kwargs)
		++ Ensures that any Response object returned from the handler method will be rendered into the correct content type, as determined by the content negotiation

+ the handler methods are :

	.get()
	.post()
	.put()
	.patch()
	.delete()