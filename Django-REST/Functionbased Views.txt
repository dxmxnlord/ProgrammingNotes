+ REST framework also allows you to work with regular function based views. It provides a set of simple decorators that wrap your function based views to ensure they receive an instance of Request (rather than the usual Django HttpRequest) and allows them to return a Response (instead of a Django HttpResponse), and allow you to configure how the request is processed.

# @api_view()

< @api_view(http_method_names=['GET']) >

+ The core of this functionality is the api_view decorator, which takes a list of HTTP methods that your view should respond to.

[[
	from rest_framework.decorators import api_view

	// only get
	@api_view()
	def hello_world(request):
	    return Response({"message": "Hello, world!"})

	// only get and post
	@api_view(['GET', 'POST'])
	def hello_world(request):
	    if request.method == 'POST':
	        return Response({"message": "Got some data!", "data": request.data})
	    return Response({"message": "Hello, world!"})
]]

## API POLICY DECORATORS

+ To override the default settings, REST framework provides a set of additional decorators which can be added to your views. These must come after (below) the @api_view decorator. These decorators correspond to the attributes set on APIView subclasses.

[[
	from rest_framework.decorators import api_view, throttle_classes
	from rest_framework.throttling import UserRateThrottle

	class OncePerDayUserThrottle(UserRateThrottle):
	        rate = '1/day'

	@api_view(['GET'])
	@throttle_classes([OncePerDayUserThrottle])
	def view(request):
	    return Response({"message": "Hello for today! See you tomorrow!"})
]]

+ The available decorators are:

	@renderer_classes(...)
	@parser_classes(...)
	@authentication_classes(...)
	@throttle_classes(...)
	@permission_classes(...)

% view scheme decorator %