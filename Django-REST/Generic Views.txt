+ If the generic views don't suit the needs of your API, you can drop down to using the regular APIView class, or reuse the mixins and base classes used by the generic views to compose your own set of reusable generic views.

# GenericAPIView

+ This class extends REST framework's APIView class, adding commonly required behavior for standard list and detail views. Each of the concrete generic views provided is built by combining GenericAPIView, with one or more mixin classes.

## attributes 

### basic settings

1. queryset - The queryset that should be used for returning objects from this view. Typically, you must either set this attribute, or override the get_queryset() method. If you are overriding a view method, it is important that you call get_queryset() instead of accessing this property directly, as queryset will get evaluated once, and those results will be cached for all subsequent requests.

2. serializer_class - The serializer class that should be used for validating and deserializing input, and for serializing output. Typically, you must either set this attribute, or override the get_serializer_class() method.

3. lookup_field - The model field that should be used to for performing object lookup of individual model instances. Defaults to 'pk'. Note that when using hyperlinked APIs you'll need to ensure that both the API views and the serializer classes set the lookup fields if you need to use a custom value.

4. lookup_url_kwarg - The URL keyword argument that should be used for object lookup. The URL conf should include a keyword argument corresponding to this value. If unset this defaults to using the same value as lookup_field.

### pagination

+ pagination_class - The pagination class that should be used when paginating list results. Defaults to the same value as the DEFAULT_PAGINATION_CLASS setting, which is 'rest_framework.pagination.PageNumberPagination'. Setting pagination_class=None will disable pagination on this view.

### filtering

+ filter_backends - A list of filter backend classes that should be used for filtering the queryset. Defaults to the same value as the DEFAULT_FILTER_BACKENDS setting.

## methods

1. get_queryset(self)

+ Returns the queryset that should be used for list views, and that should be used as the base for lookups in detail views. Defaults to returning the queryset specified by the queryset attribute.

+ This method should always be used rather than accessing self.queryset directly, as self.queryset gets evaluated only once, and those results are cached for all subsequent requests. May be overridden to provide dynamic behavior, such as returning a queryset, that is specific to the user making the request.

[[
	def get_queryset(self):
	    user = self.request.user
	    return user.accounts.all()
]]

2. get_object(self)

+ Returns an object instance that should be used for detail views. Defaults to using the lookup_field parameter to filter the base queryset. May be overridden to provide more complex behavior, such as object lookups based on more than one URL kwarg.

[[
	// multiple url kwargs
	def get_object(self):
	    queryset = self.get_queryset()
	    filter = {}
	    for field in self.multiple_lookup_fields:
	        filter[field] = self.kwargs[field]

	    obj = get_object_or_404(queryset, **filter)
	    self.check_object_permissions(self.request, obj)
	    return obj
	    // Note that if your API doesn't include any object level permissions, you may optionally exclude the self.check_object_permissions, and simply return the object from the get_object_or_404 lookup.
]]

3. filter_queryset(self, queryset)

+ Given a queryset, filter it with whichever filter backends are in use, returning a new queryset.

[[
	def filter_queryset(self, queryset):
	    filter_backends = [CategoryFilter]

	    if 'geo_route' in self.request.query_params:
	        filter_backends = [GeoRouteFilter, CategoryFilter]
	    elif 'geo_point' in self.request.query_params:
	        filter_backends = [GeoPointFilter, CategoryFilter]

	    for backend in list(filter_backends):
	        queryset = backend().filter_queryset(self.request, queryset, view=self)

	    return queryset
]]

4. get_serializer_class(self)

+ Returns the class that should be used for the serializer. Defaults to returning the serializer_class attribute. May be overridden to provide dynamic behavior, such as using different serializers for read and write operations, or providing different serializers to different types of users.

[[
	def get_serializer_class(self):
	    if self.request.user.is_staff:
	        return FullAccountSerializer
	    return BasicAccountSerializer
]]

5. save and deletion hooks

	++ perform_create(self, serializer) - Called by CreateModelMixin when saving a new object instance.

	++ perform_update(self, serializer) - Called by UpdateModelMixin when saving an existing object instance.

	++ perform_destroy(self, instance) - Called by DestroyModelMixin when deleting an object instance.

+ These hooks are particularly useful for setting attributes that are implicit in the request, but are not part of the request data

[[
	// set an attribute on the object based on the request user, or based on a URL keyword argument.
	def perform_create(self, serializer):
	    serializer.save(user=self.request.user)
]]

+ These override points are also particularly useful for adding behavior that occurs before or after saving an object

[[
	def perform_update(self, serializer):
	    instance = serializer.save()
	    send_email_confirmation(user=self.request.user, modified=instance)
]]

+ You can also use these hooks to provide additional validation, by raising a ValidationError(). This can be useful if you need some validation logic to apply at the point of database save. 

[[
	def perform_create(self, serializer):
	    queryset = SignupRequest.objects.filter(user=self.request.user)
	    if queryset.exists():
	        raise ValidationError('You have already signed up')
	    serializer.save(user=self.request.user)
]]

6. other methods

+ You won't typically need to override the following methods, although you might need to call into them if you're writing custom views using GenericAPIView.

	++ get_serializer_context(self) - Returns a dictionary containing any extra context that should be supplied to the serializer. Defaults to including 'request', 'view' and 'format' keys.
	++ get_serializer(self, instance=None, data=None, many=False, partial=False) - Returns a serializer instance.
	++ get_paginated_response(self, data) - Returns a paginated style Response object.
	++ paginate_queryset(self, queryset) - Paginate a queryset if required, either returning a page object, or None if pagination is not configured for this view.
	++ filter_queryset(self, queryset) - Given a queryset, filter it with whichever filter backends are in use, returning a new queryset.

# MIXINS

+ The mixin classes provide the actions that are used to provide the basic view behavior. Note that the mixin classes provide action methods rather than defining the handler methods, such as .get() and .post(), directly. This allows for more flexible composition of behavior.

1. ListModelMixin
2. CreateModelMixin
3. RetrieveModelMixin
4. UpdateModelMixin
5. DesstroyModelMixin

% Concrete View Classes %