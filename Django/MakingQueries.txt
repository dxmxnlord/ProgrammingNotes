
+ Once you’ve created your data models, Django automatically gives you a database-abstraction API that lets you create, retrieve, update and delete objects.

[[
	from django.db import models

	class Blog(models.Model):
	    name = models.CharField(max_length=100)
	    tagline = models.TextField()

	    def __str__(self):
	        return self.name

	class Author(models.Model):
	    name = models.CharField(max_length=200)
	    email = models.EmailField()

	    def __str__(self):
	        return self.name

	class Entry(models.Model):
	    blog = models.ForeignKey(Blog, on_delete=models.CASCADE)
	    headline = models.CharField(max_length=255)
	    body_text = models.TextField()
	    pub_date = models.DateField()
	    mod_date = models.DateField()
	    authors = models.ManyToManyField(Author)
	    n_comments = models.IntegerField()
	    n_pingbacks = models.IntegerField()
	    rating = models.IntegerField()

	    def __str__(self):
	        return self.headline
]]

# CREATING OBJECTS 

+ A model class represents a database table, and an instance of that class represents a particular record in the database table.

+ To create an object, instantiate it using keyword arguments to the model class, then call save() to save it to the database.

>>> from blog.models import Blog
>>> b = Blog(name='Beatles Blog', tagline='All the latest Beatles news.')
>>> b.save()

+ This performs an INSERT SQL statement behind the scenes. Django doesn’t hit the database until you explicitly call save().

# SAVING CHANGES

>>> b.name='Bottles Blog'
>>> b.save()

+ This performs an UPDATE SQL statement behind the scenes. Django doesn’t hit the database until you explicitly call save().

# SAVING FOREIGNKEYS AND MANYTOMANY

+ Updating a ForeignKey field works exactly the same way as saving a normal field – simply assign an object of the right type to the field in question.

>>> from blog.models import Blog, Entry
>>> entry = Entry.objects.get(pk=1)
>>> cheese_blog = Blog.objects.get(name="Cheddar Talk")
>>> entry.blog = cheese_blog
>>> entry.save()

+ Updating a ManyToManyField works a little differently – use the add() method on the field to add a record to the relation

>>> from blog.models import Author
>>> joe = Author.objects.create(name="Joe")
>>> entry.authors.add(joe)

+ To add multiple records to a ManyToManyField in one go, include multiple arguments in the call to add(), like this:

>>> john = Author.objects.create(name="John")
>>> paul = Author.objects.create(name="Paul")
>>> entry.authors.add(john, paul)

# RETRIEVING OBJECTS 

+ To retrieve objects from your database, construct a QuerySet via a Manager on your model class

+ A Manager is the interface through which database query operations are provided to Django models. At least one Manager exists for every model in a Django application.

+ By default, Django adds a Manager with the name objects to every Django model class. However, if you want to use objects as a field name, or if you want to use a name other than objects for the Manager, you can rename it on a per-model basis

[[
	class Person(models.Model):
	    #...
	    people = models.Manager()
]]

+ A QuerySet represents a collection of objects from your database. It can have zero, one or many filters. Filters narrow down the query results based on the given parameters. In SQL terms, a QuerySet equates to a SELECT statement, and a filter is a limiting clause such as WHERE or LIMIT

>>> Blog.objects
<django.db.models.manager.Manager object at ...>
>>> b = Blog(name='Foo', tagline='Bar')
>>> b.objects
Traceback:
    ...
AttributeError: "Manager isn't accessible via Blog instances."

# RETRIEVING ALL OBJECTS 

+ The simplest way to retrieve objects from a table is to get all of them. To do this, use the all() method on a Manager which returns a QuerySet of all the objects in the database.

>>> all_entries = Entry.objects.all()

# RETURNING SPECIFIC OBJECTS WITH FILTERS

+ The QuerySet returned by all() describes all objects in the database table. Usually, though, you’ll need to select only a subset of the complete set of objects. To create such a subset, you refine the initial QuerySet, adding filter conditions. The two most common ways to refine a QuerySet are : 

## FILTER AND EXCLUDE 

+Filter returns a new QuerySet containing objects that match the given lookup parameters.
+ Exclude returns a new QuerySet containing objects that do not match the given lookup parameters.

>>> Entry.objects.filter(pub_date__year=2006)
>>> Entry.objects.all().filter(pub_date__year=2006)
>>> Entry.objects.exclude(pub_date__year=2006)

## CHAINED FILTER

>>> Entry.objects.filter(
...     headline__startswith='What'
... ).exclude(
...     pub_date__gte=datetime.date.today()
... ).filter(
...     pub_date__gte=datetime.date(2005, 1, 30)
... )
// This takes the initial QuerySet of all entries in the database, adds a filter, then an exclusion, then another filter. The final result is a QuerySet containing all entries with a headline that starts with “What”, that were published between January 30, 2005, and the current day.

+ Each time you refine a QuerySet, you get a brand-new QuerySet that is in no way bound to the previous QuerySet.

>>> q1 = Entry.objects.filter(headline__startswith="What")
>>> q2 = q1.exclude(pub_date__gte=datetime.date.today())
>>> q3 = q1.filter(pub_date__gte=datetime.date.today())

# RETRIEVING A SINGLE OBJECT 

+ filter() will always give you a QuerySet, even if only a single object matches the query - in this case, it will be a QuerySet containing a single element. If you know there is only one object that matches your query, you can use the get() method on a Manager which returns the object directly

>>> one_entry = Entry.objects.get(pk=1)

## LIMITING QUERYSETS

+ Use a subset of Python’s array-slicing syntax to limit your QuerySet to a certain number of results. 

>>> Entry.objects.all()[:5]
>>> Entry.objects.order_by('headline')[0]

+ Negative indexing (i.e. Entry.objects.all()[-1]) is not supported.

# FIELD LOOKUPS 

+ Field lookups are how you specify the meat of an SQL WHERE clause. They’re specified as keyword arguments to the QuerySet methods filter(), exclude() and get().

+ Basic lookups keyword arguments take the form field__lookuptype=value

>>> Entry.objects.filter(pub_date__lte='2006-01-01')
[ SELECT * FROM blog_entry WHERE pub_date <= '2006-01-01'; ]

+ The field specified in a lookup has to be the name of a model field. There’s one exception though, in case of a ForeignKey you can specify the field name suffixed with _id. In this case, the value parameter is expected to contain the raw value of the foreign model’s primary key

>>> Entry.objects.filter(blog_id=4)

1. exact - for an exact match 

>>> Entry.objects.get(headline__exact="Cat bites dog")

2. iexact - exact but a case-insensitive match 

3. contains - case sensitive containment

4. icontains - case insensitive containment

5. startswith/istartswith | endswith/iendswith

6. in - In a given iterable; often a list, tuple, queryset, or strings

>>> Entry.objects.filter(id__in=[1, 3, 4])

>>> inner_qs = Blog.objects.filter(name__contains='Cheddar')
>>> entries = Entry.objects.filter(blog__in=inner_qs)
// SELECT ... WHERE blog.id IN (SELECT id FROM ... WHERE NAME LIKE '%Cheddar%')

7. isnull - true or false value

8. gt - greater than

9. gte - greater than or equal to 

10. lt - less than

11. lte -less than or equal to 

12. range - range test 

>>> start_date = datetime.date(2005, 1, 1)
>>> end_date = datetime.date(2005, 3, 31)
>>> Entry.objects.filter(pub_date__range=(start_date, end_date))

13. date - For datetime fields, casts the value as date.

>>> Entry.objects.filter(pub_date__date=datetime.date(2005, 1, 1))
>>> Entry.objects.filter(pub_date__date__gt=datetime.date(2005, 1, 1))

14. year - For date and datetime fields, an exact year match

>>> Entry.objects.filter(pub_date__year=2005)
>>> Entry.objects.filter(pub_date__year__gte=2005)

15. month - For date and datetime fields, an exact month match

>>> Entry.objects.filter(pub_date__month=12)
>>> Entry.objects.filter(pub_date__month__gte=6)

16. day - For date and datetime fields, an exact day match

>>> Entry.objects.filter(pub_date__day=3)
>>> Entry.objects.filter(pub_date__day__gte=3)

17. week - For date and datetime fields, return the week number

>>> Entry.objects.filter(pub_date__week=52)
>>> Entry.objects.filter(pub_date__week__gte=32, pub_date__week__lte=38)

18. time stuff to 

19. regex/iregex - match regex

>>> Entry.objects.get(title__regex=r'^(An?|The) +')

# LOOKUPS THAT SPAN RELATIONSHIPS 

+ Django takes care of sql joins automatically. To span a relationship, just use the field name of related fields across models, separated by double underscores, until you get to the field you want.

>>> Entry.objects.filter(blog__name='Beatles Blog')
// all entry objects with blog whose name is 'Beatles Blog'

+ It works backwards, too. To refer to a “reverse” relationship, just use the lowercase name of the model.

>>> Blog.objects.filter(entry__headline__contains='Lennon')
// all Blog objects which have at least one Entry whose headline contains 'Lennon'
// normally you'd have to use a subquery like below but django makes it easier
// SELECT * FROM BLOG WHERE fk IN (SELECT fk FROM ENTRY WHERE headline LIKE '%lennon%')

+ For manytomany relationship objects, chained filters filter from the same model rather than the previous filters result. Per say : 

{ 
	Blog.objects.filter(
	       entry__headline__contains='Lennon', 
	       entry__pub_date__year=2008)
	This will give you all the Blogs that have one entry with both (entry__headline__contains='Lennon') AND (entry__pub_date__year=2008), which is what you would expect from this query.

	Result:

	Blog with {entry.headline: 'Life of Lennon', entry.pub_date: '2008'}
	Example 2 (chained)

	Blog.objects.filter(
	       entry__headline__contains='Lennon'
	           ).filter(
	       entry__pub_date__year=2008)
	This will cover all the results from Example 1, but it will generate slightly more result. Because it first filters all the blogs with (entry__headline__contains='Lennon') and then from the blogs again filters (entry__pub_date__year=2008).

	The difference is that it will also give you results like:

	A single Blog with multiple entries

	{entry.headline: '**Lennon**', entry.pub_date: 2000}, 
	{entry.headline: 'Bill', entry.pub_date: **2008**}
}

## FILTERS CAN REFERENCE FIELDS ON THE MODEL

+ If you want to compare a model field to another model field you need to use a F() expression. These references can then be used in query filters to compare the values of two different fields on the same model instance. Emphasis on the same clause.

>>> from django.db.models import F
>>> Entry.objects.filter(n_comments__gt=F('n_pingbacks'))
//  find a list of all blog entries that have had more comments than pingbacks
// we construct an F() object to reference the pingback count, and use that F() object in the query

+ Django supports the use of addition, subtraction, multiplication, division, modulo, and power arithmetic with F() objects, both with constants and with other F() objects.

>>> Entry.objects.filter(rating__lt=F('n_comments') + F('n_pingbacks') * 2 )

+ You can also use the double underscore notation to span relationships in an F() object. An F() object with a double underscore will introduce any joins needed to access the related object

>>> Entry.objects.filter(authors__name=F('blog__name'))

+ The F() objects support bitwise operations by .bitand(), .bitor(), .bitrightshift(), and .bitleftshift() 

>>> F('somefield').bitand(16)

## PK LOOKUP SHORTCUT

+ For convenience, Django provides a pk lookup shortcut, which stands for “primary key”.

>>> Blog.objects.get(id__exact=14) # Explicit form
>>> Blog.objects.get(id=14) # __exact is implied
>>> Blog.objects.get(pk=14) # pk implies id__exact

>>> Blog.objects.filter(pk__in=[1,4,7])

>>> Blog.objects.filter(pk__gt=14)

+ They also work across joins 

>>> Entry.objects.filter(blog__id__exact=3) # Explicit form
>>> Entry.objects.filter(blog__id=3)        # __exact is implied
>>> Entry.objects.filter(blog__pk=3) 

## CACHING AND QUERYSETS 

+ Each QuerySet contains a cache to minimize database access

+ In a newly created QuerySet, the cache is empty. The first time a QuerySet is evaluated – and, hence, a database query happens – Django saves the query results in the QuerySet’s cache and returns the results that have been explicitly requested (e.g., the next element, if the QuerySet is being iterated over). Subsequent evaluations of the QuerySet reuse the cached results.

>>> print([e.headline for e in Entry.objects.all()])
>>> print([e.pub_date for e in Entry.objects.all()])
// creates two querysets

>>> queryset = Entry.objects.all()
>>> print([p.headline for p in queryset]) # Evaluate the query set.
>>> print([p.pub_date for p in queryset]) # Re-use the cache from the evaluation.

+ Querysets do not always cache their results. When evaluating only part of the queryset, the cache is checked, but if it is not populated then the items returned by the subsequent query are not cached. 

>>> queryset = Entry.objects.all()
>>> print(queryset[5]) # Queries the database
>>> print(queryset[5]) # Queries the database again
// the first print creates the queryset but since it is partial no cache is made

+ However, if the entire queryset has already been evaluated, the cache will be checked instead:

>>> queryset = Entry.objects.all()
>>> [entry for entry in queryset] # Queries the database
>>> print(queryset[5]) # Uses cache
>>> print(queryset[5]) # Uses cache
// the entry list creates the queryset and  queries the entire db creating cache

## COMPLEX LOOKUPS WITH Q OBJECTS 

+ A Q object (django.db.models.Q) is an object used to encapsulate a collection of keyword arguments.

+ Q objects can be combined using the & and | operators. When an operator is used on two Q objects, it yields a new Q object.

+ You can compose statements of arbitrary complexity by combining Q objects with the & and | operators and use parenthetical grouping. Also, Q objects can be negated using the ~ operator, allowing for combined lookups that combine both a normal query and a negated (NOT) query

[ Q(question__startswith='Who') | ~Q(pub_date__year=2005) ]

+ Each lookup function that takes keyword-arguments (e.g. filter(), exclude(), get()) can also be passed one or more Q objects as positional (not-named) arguments. If you provide multiple Q object arguments to a lookup function, the arguments will be “AND”ed together.

>>> Poll.objects.get(
    Q(question__startswith='Who'),
    Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6))
)
// SELECT * from polls WHERE question LIKE 'Who%' AND (pub_date = '2005-05-02' OR pub_date = '2005-05-06')

+ Lookup functions can mix the use of Q objects and keyword arguments. All arguments provided to a lookup function (be they keyword arguments or Q objects) are “AND”ed together. However, if a Q object is provided, it must precede the definition of any keyword arguments.

>>> Poll.objects.get(
    Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6)),
    question__startswith='Who',
)
// valid since Q is before the keyword argument

>>> Poll.objects.get(
    question__startswith='Who',
    Q(pub_date=date(2005, 5, 2)) | Q(pub_date=date(2005, 5, 6))
)
// invalid Q is after the keyword argument

+ A valid workaround is to use all Q objects like the 3rd previous example

## COMPARING OBJECTS 

+ To compare two model instances, just use the standard Python comparison operator, the double equals sign: ==. Behind the scenes, that compares the primary key values of two models.

+ If a model’s primary key isn’t called id, no problem. Comparisons will always use the primary key, whatever it’s called.

>>> some_entry == other_entry
>>> some_entry.id == other_entry.id 
// equivalent 

## DELETING OBJECTS 

+ The delete method, conveniently, is named delete(). This method immediately deletes the object and returns the number of objects deleted and a dictionary with the number of deletions per object type. You can also delete objects in bulk. Every QuerySet has a delete() method, which deletes all members of that QuerySet.

>>> e.delete()
>>> Entry.objects.filter(pub_date__year=2005).delete()

+ When Django deletes an object, by default it emulates the behavior of the SQL constraint ON DELETE CASCADE – in other words, any objects which had foreign keys pointing at the object to be deleted will be deleted along with it.

>>> b = Blog.objects.get(pk=1)
>>> b.delete()
// This will delete the Blog and all of its Entry objects.

+ Note that delete() is the only QuerySet method that is not exposed on a Manager itself. This is a safety mechanism to prevent you from accidentally requesting Entry.objects.delete(), and deleting all the entries. If you do want to delete all the objects, then you have to explicitly request a complete query set:

>>> Entry.objects.all().delete()

## UPDATING MULTIPLE OBJECTS AT ONCE

>>> Entry.objects.filter(pub_date__year=2007).update(headline='Everything is the same')
// Update all the headlines with pub_date in 2007

+ To update ForeignKey fields, set the new value to be the new model instance you want to point to.

>> b = Blog.objects.get(pk=1)
>>> Entry.objects.all().update(blog=b)
// Change every Entry so that it belongs to this Blog.

+ Calls to update can also use F expressions to update one field based on the value of another field in the model. However, unlike F() objects in filter and exclude clauses, you can’t introduce joins when you use F() objects in an update – you can only reference fields local to the model being updated.

## RELATED OBJECTS REFERENCE

+ A “related manager” is a manager used in a one-to-many or many-to-many related context.

1. add() - Adds the specified model objects to the related object set.

>>> b = Blog.objects.get(id=1)
>>> e = Entry.objects.get(id=234)
>>> b.entry_set.add(e) # Associates Entry e with Blog b.
// in the case of a ForeignKey relationship, QuerySet.update() is used to perform the update. This requires the objects to already be saved.

+ You can use the bulk=False argument to instead have the related manager perform the update by calling e.save().

2. create() - 

+ Creates a new object, saves it and puts it in the related object set. Returns the newly created object

>>> b = Blog.objects.get(id=1)
>>> e = b.entry_set.create(
...     headline='Hello',
...     body_text='Hi',
...     pub_date=datetime.date(2005, 1, 1)
... )
// No need to call e.save() at this point

+ Note that there’s no need to specify the keyword argument of the model that defines the relationship. In the above example, we don’t pass the parameter blog to create(). Django figures out that the new Entry object’s blog field should be set to b.

3. remove() - Removes the specified model objects from the related object set:

>>> b = Blog.objects.get(id=1)
>>> e = Entry.objects.get(id=234)
>>> b.entry_set.remove(e)
// Disassociates Entry e from Blog b. call e.save() to update

4. clear() - Removes all objects from the related object set:

>>> b = Blog.objects.get(id=1)
>>> b.entry_set.clear()

+ Note this doesn’t delete the related objects – it just disassociates them. Just like remove(), clear() is only available on ForeignKeys where null=True and it also accepts the bulk keyword argument.

5. set() - 

# METHODS TO RETRIEVE QUERYSETS

1. filter
2. exclude
3. get
4. all()
5. order_by : 

	+ By default, results returned by a QuerySet are ordered by the ordering tuple given by the ordering option in the model’s Meta. You can override this on a per-QuerySet basis by using the order_by method.

	+ orders in ascending by default unless a minus is specified in the order_by argument. use a question mark for random ordering

	>>> Entry.objects.filter(pub_date__year=2005).order_by('-pub_date', 'headline')
	// orders by pub_date in desc then headline asc
	>>> Entry.objects.order_by('?')
	// expensive and slow however

	+ you can order by spanning relationships too 

	>>> Entry.objects.order_by('blog__name', 'headline')

	+ If you try to order by a field that is a relation to another model, Django will use the default ordering on the related model, or order by the related model’s primary key if there is no Meta.ordering specified.

	>>> Entry.objects.order_by('blog')
	>>> Entry.objects.order_by('blog__id')
	// identical
	// If Blog had ordering = ['name'], then the first queryset would be identical to : 
	>>> Entry.objects.order_by('blog__name')

6. reverse() : 

	+ Use the reverse() method to reverse the order in which a queryset’s elements are returned

	>>> Entry.objects.reverse()

7. distinct() :

	+ Returns a new QuerySet that uses SELECT DISTINCT in its SQL query. This eliminates duplicate rows from the query results.

	+ By default, a QuerySet will not eliminate duplicate rows. In practice, this is rarely a problem, because simple queries such as Blog.objects.all() don’t introduce the possibility of duplicate result rows. However, if your query spans multiple tables, it’s possible to get duplicate results when a QuerySet is evaluated. That’s when you’d use distinct().

8. values() : 

	+ Returns a QuerySet that returns dictionaries, rather than model instances, when used as an iterable.

	// This list contains a Blog object.
	>>> Blog.objects.filter(name__startswith='Beatles')
	<QuerySet [<Blog: Beatles Blog>]>

	// This list contains a dictionary.
	>>> Blog.objects.filter(name__startswith='Beatles').values()
	<QuerySet [{'id': 1, 'name': 'Beatles Blog', 'tagline': 'All the latest Beatles news.'}]>

	+ The values() method takes optional positional arguments, *fields, which specify field names to which the SELECT should be limited. If you specify the fields, each dictionary will contain only the field keys/values for the fields you specify

	>>> Blog.objects.values()
	<QuerySet [{'id': 1, 'name': 'Beatles Blog', 'tagline': 'All the latest Beatles news.'}]>
	>>> Blog.objects.values('id', 'name')
	<QuerySet [{'id': 1, 'name': 'Beatles Blog'}]>

9. union() : 

	+ Uses SQL’s UNION operator to combine the results of two or more QuerySets.

	>>> qs1.union(qs2, qs3)

	+ Passing different models works as long as the SELECT list is the same in all QuerySets (at least the types, the names don’t matter as long as the types in the same order). In such cases, you must use the column names from the first QuerySet in QuerySet methods applied to the resulting QuerySet

	>>> qs1 = Author.objects.values_list('name')
	>>> qs2 = Entry.objects.values_list('headline')
	>>> qs1.union(qs2).order_by('name')

10. intersection() : 

	+ Uses SQL’s INTERSECT operator to return the shared elements of two or more QuerySets.

11. difference() :

	+ Uses SQL’s EXCEPT operator to keep only elements present in the QuerySet but not in some other QuerySets.

12. defer() : 

	+ restrict the resulting queryset to only certain fields by specifying the fields to omit

	>>> Entry.objects.defer("headline", "body")
	// excludes headline and body 

13. only() : 

	+ The only() method is more or less the opposite of defer(). You call it with the fields that should not be deferred when retrieving a model. If you have a model where almost all the fields need to be deferred, using only() to specify the complementary set of fields can result in simpler code.

	>>> Person.objects.defer("age", "biography")
	>>> Person.objects.only("name")
	// same use

14. raw() : 

	+ takes a raw sql and evaluates it
	// more notes to come //

15. count() : 

	+ Returns an integer representing the number of objects in the database matching the QuerySet.

	>>> Entry.objects.count()
	// total number of entries in the database.

16. latest() : 

	+ Returns the latest object in the table based on the given field(s). You can also choose the latest based on several fields

	>>> Entry.objects.latest('pub_date')
	>>> Entry.objects.latest('pub_date', '-expire_date')
	// select the Entry with the earliest expire_date when two entries have the same pub_date

17. earliest() : 

	+ Works otherwise like latest() except the direction is changed.

18. first() : 

	+ Returns the first object matched by the queryset, or None if there is no matching object. If the QuerySet has no ordering defined, then the queryset is automatically ordered by the primary key.

	>>> p = Article.objects.order_by('title', 'pub_date').first()

19. last() : 

	+ Works like first(), but returns the last object in the queryset.

20. exists() : 

+ is true if  QuerySet contains any results, and False if not

21. update() : 

	+ erforms an SQL update query for the specified fields, and returns the number of rows matched (which may not be equal to the number of rows updated if some rows already have the new value).

	>>> Entry.objects.filter(pub_date__year=2010).update(comments_on=False)
	>>> Entry.objects.filter(pub_date__year=2010).update(comments_on=False, headline='This is old')

	+ The update() method is applied instantly, and the only restriction on the QuerySet that is updated is that it can only update columns in the model’s main table, not on related models.

	>>> Entry.objects.update(blog__name='foo') # Won't work!
	// invalid

# AGGREGATORS