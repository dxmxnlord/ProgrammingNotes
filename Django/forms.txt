+ Django’s login form is returned using the POST method, in which the browser bundles up the form data, encodes it for transmission, sends it to the server, and then receives back its response.

+ GET, by contrast, bundles the submitted data into a string, and uses this to compose a URL. The URL contains the address where the data must be sent, as well as the data keys and values. You can see this in action if you do a search in the Django documentation, which will produce a URL of the form https://docs.djangoproject.com/search/?q=forms&release=1.

+ At the heart of this system of components is Django’s Form class. In much the same way that a Django model describes the logical structure of an object, its behavior, and the way its parts are represented to us, a Form class describes a form and determines how it works and appears.

+ A form’s fields are themselves classes; they manage form data and perform validation when a form is submitted. A DateField and a FileField handle very different kinds of data and have to do differ

+ A form field is represented to a user in the browser as an HTML “widget” - a piece of user interface machinery. Each field type has an appropriate default Widget class, but these can be overridden as required.

# BUILDING A FORM

[[
	from django import forms

	class NameForm(forms.Form):
	    your_name = forms.CharField(label='Your name', max_length=100)
]]

+ A Form instance has an is_valid() method, which runs validation routines for all its fields. When this method is called, if all fields contain valid data, it will:

	+ return True
	+ place the form’s data in its cleaned_data attribute.

// Rendered form
[[
	<label for="your_name">Your name: </label>
	<input id="your_name" type="text" name="your_name" maxlength="100" required>
]]

+ Note that it does not include the <form> tags, or a submit button.

## IN THE VIEWS.PY

+ Form data sent back to a Django website is processed by a view, generally the same view which published the form. This allows us to reuse some of the same logic.

ex. 

[[
	from django.http import HttpResponseRedirect
	from django.shortcuts import render

	from .forms import NameForm

	def get_name(request):
	    # if this is a POST request we need to process the form data
	    if request.method == 'POST':
	        # create a form instance and populate it with data from the request:
	        form = NameForm(request.POST)
	        # check whether it's valid:
	        if form.is_valid():
	            # process the data in form.cleaned_data as required
	            # ...
	            # redirect to a new URL:
	            return HttpResponseRedirect('/thanks/')

	    # if a GET (or any other method) we'll create a blank form
	    else:
	        form = NameForm()

	    return render(request, 'name.html', {'form': form})
]]

+ If we arrive at this view with a GET request, it will create an empty form instance and place it in the template context to be rendered. This is what we can expect to happen the first time we visit the URL.

+ If the form is submitted using a POST request, the view will once again create a form instance and populate it with data from the request: form = NameForm(request.POST) This is called “binding data to the form” (it is now a bound form).

+ We call the form’s is_valid() method; if it’s not True, we go back to the template with the form. This time the form is no longer empty (unbound) so the HTML form will be populated with the data previously submitted, where it can be edited and corrected as required.

+ previously submitted, where it can be edited and corrected as required.

If is_valid() is True, we’ll now be able to find all the validated form data in its cleaned_data attribute. We can use this data to update the database or do other processing before sending an HTTP redirect to the browser telling it where to go next.

+ the validated form data will be in the form.cleaned_data dictionary. This data will have been nicely converted into Python types for you.

[[
	class ContactForm(forms.Form):
	    subject = forms.CharField(max_length=100)
	    message = forms.CharField(widget=forms.Textarea)
	    sender = forms.EmailField()
	    cc_myself = forms.BooleanField(required=False)

	    //views
	    form=NewForm(request.POST)
	    if form.is_valid():
	        subject = form.cleaned_data['subject']
	        message = form.cleaned_data['message']
	        sender = form.cleaned_data['sender']
	        cc_myself = form.cleaned_data['cc_myself']
]]

+ All you need to do to get your form into a template is to place the form instance into the template context. So if your form is called form in the context, {{ form }} will render its <label> and <input> elements appropriately. There are several output options :

	{{ form.as_table }} will render them as table cells wrapped in <tr> tags
	{{ form.as_p }} will render them wrapped in <p> tags
	{{ form.as_ul }} will render them wrapped in <li> tags
	// you’ll have to provide the surrounding <table> or <ul> elements yourself.

## RENDERING FIELDS MANUALLY 

+ Each field is available as an attribute of the form using {{ form.name_of_field }}
+ each field has the attributes : 

	++ form.field.id_for_label - label id
	++ form.field.label - label name
	++ form.field.value - field value
	++ form,field.is_hidden - t if hidden 
	++ form.field.errors - validation errors
		+++ displays a list of form errors, rendered as an unordered list
			[[
				<ul class="errorlist">
				    <li>Sender is required.</li>
				</ul>
			]]
		+++ The list has a CSS class of errorlist to allow you to style its appearance.
		+++ further customize the display of errors by looping over them
		[[
			{% if form.subject.errors %}
			    <ol>
			    {% for error in form.subject.errors %}
			        <li><strong>{{ error|escape }}</strong></li>
			    {% endfor %}
			    </ol>
			{% endif %}
		]]
	++ form.field.non_field_errors - errors unrelated to the field
		+++ rendered with an additional class of nonfield to help distinguish them 
		[[
			<ul class="errorlist nonfield">
			    <li>Generic validation error</li>
			</ul>
		]]

	[[
		{{ form.non_field_errors }}
		<div class="fieldWrapper">
		    {{ form.subject.errors }}
		    <label for="{{ form.subject.id_for_label }}">Email subject:</label>
		    {{ form.subject }}
		</div>
		<div class="fieldWrapper">
		    {{ form.message.errors }}
		    <label for="{{ form.message.id_for_label }}">Your message:</label>
		    {{ form.message }}
		</div>
		<div class="fieldWrapper">
		    {{ form.sender.errors }}
		    <label for="{{ form.sender.id_for_label }}">Your email address:</label>
		    {{ form.sender }}
		</div>
		<div class="fieldWrapper">
		    {{ form.cc_myself.errors }}
		    <label for="{{ form.cc_myself.id_for_label }}">CC yourself?</label>
		    {{ form.cc_myself }}
		</div>
	]]
	+ the label_tag attribute creates all the labels for you

		[[
			<div class="fieldWrapper">
			    {{ form.subject.errors }}
			    {{ form.subject.label_tag }}
			    {{ form.subject }}
			</div>
		]]

+ a form instance has 2 attributes, form.hidden_fields and form.visible_fields. The hidden fields should be iteated over independantly since the error messages are not to be displayed.

[[
	{% for hidden in form.hidden_fields %}
	{{ hidden }}
	{% endfor %}
	{# Include the visible fields #}
	{% for field in form.visible_fields %}
	    <div class="fieldWrapper">
	        {{ field.errors }}
	        {{ field.label_tag }} {{ field }}
	    </div>
	{% endfor %}
]]

# THE FORM CLASS

+ There are 2 types of forms: 

	++ An unbound form has no data associated with it. When rendered to the user, it will be empty or will contain default values.

	++ A bound form has submitted data, and hence can be used to tell if that data is valid. If an invalid bound form is rendered, it can include inline error messages telling the user what data to correct.

+ The form’s is_bound attribute will tell you whether a form has data bound to it or not.

## FORM FIELDS

+ Fields are classes that are like a head to what kind of an input an input is 
+ Each field has custom validation logic, along with a few other hooks.

+  Each Field instance has a clean() method, which takes a single argument and either raises a django.forms.ValidationError exception or returns the clean value

[[
	from django import forms
	>>> f = forms.EmailField()
	>>> f.clean('foo@example.com')
	// raises no error
]]

+ Each Field class constructor takes at least these arguments. Some Field classes take additional, field-specific arguments, but these are the important ones:

	1. required : 

		++ By default, each Field class assumes the value is required, so if you pass an empty value – either None or the empty string ("") – then clean() will raise a ValidationError exception

		[[
			>>> f = forms.CharField(required=False)
			>>> f.clean(None)
			// no error
		]]

	2. label : 

		++ The label argument lets you specify the “human-friendly” label for this field. This is used when the Field is displayed in a Form.

		[[
			...     name = forms.CharField(label='Your name')
			...     url = forms.URLField(label='Your website', required=False)
		]]

	3. label_suffix : 

		++ A translatable string (defaults to a colon (:) in English) that will be appended after any label name when a form is rendered.
		++ The label_suffix argument lets you override the form’s label_suffix on a per-field basis

		[[
			...     captcha_answer = forms.IntegerField(label='2 + 2', label_suffix=' =')
			// the label will be " 2 + 2 ="
		]]

	4. initial :

		++ The initial argument lets you specify the initial value to use when rendering this Field in an unbound Form. The value can be a constant or a callable. The callable will be evaluated only when the unbound form is displayed, not when it is defined.

		[[
			...     name = forms.CharField(initial='Your name')
		]]

		++ initial values are not used as “fallback” data in validation if a particular field’s value is not given. initial values are only intended for initial form display

		[[
			>>> class CommentForm(forms.Form):
			...     name = forms.CharField(initial='Your name')
			...     url = forms.URLField(initial='http://')
			...     comment = forms.CharField()
			>>> data = {'name': '', 'url': '', 'comment': 'Foo'}
			>>> f.is_valid()
			// not valid
		]]

		5. widget :

			++ The widget argument lets you specify a Widget class to use when rendering this Field.
			% SEPARATE SECTION AHEAD %

		6. error_messages

			++ The error_messages argument lets you override the default messages that the field will raise. Pass in a dictionary with keys matching the error messages you want to override.

			[[
				>>> name = forms.CharField(error_messages={'required': 'Please enter your name'})
			]]

		7. disabled : 

		++ The disabled boolean argument, when set to True, disables a form field using the disabled HTML attribute so that it won’t be editable by users. Even if a user tampers with the field’s value submitted to the server, it will be ignored in favor of the value from the form’s initial data.

+ To check if the field value has changed from the inital value use Field.has_changed(). Returns True/False

## WIDGETS

+ A widget is Django’s representation of an HTML input element. The widget handles the rendering of the HTML, and the extraction of data from a GET/POST dictionary that corresponds to the widget.

[[
	comment = forms.CharField(widget=forms.Textarea)
	// if no widget is given default is used
]]

+ Many widgets have optional extra arguments; they can be set when defining the widget on the field

[[
	BIRTH_YEAR_CHOICES = ['1980', '1981', '1982']
	FAVORITE_COLORS_CHOICES = [
	    ('blue', 'Blue'),
	    ('green', 'Green'),
	    ('black', 'Black'),
	]

	class SimpleForm(forms.Form):
	    birth_year = forms.DateField(widget=forms.SelectDateWidget(years=BIRTH_YEAR_CHOICES))
	    favorite_colors = forms.MultipleChoiceField(
	        required=False,
	        widget=forms.CheckboxSelectMultiple,
	        choices=FAVORITE_COLORS_CHOICES,
	    )
]]

+ To customize a widget by giving a CSS class you can use the attrs argument which accepts a dictionary of with the HTML attribute and its value. The id is either label name or id_<varname>

[[
	name = forms.CharField(widget=forms.TextInput(attrs={'class': 'special'}))
	comment = forms.CharField(widget=forms.TextInput(attrs={'size': '40'}))

	//or 

	name = forms.CharField()
	comment = forms.CharField()
	name.widget.attrs.update({'class': 'special'})
	comment.widget.attrs.update(size='40')
]]

+ The widget class has certain properties : 

	1. attrs - define the widget's html attributes
	2. get_context - Returns a dictionary of values to use when rendering the widget template.
		'name': The name of the field from the name argument.
		'is_hidden': A boolean indicating whether or not this widget is hidden.
		'required': A boolean indicating whether or not the field for this widget is required.
		'value': The value as returned by format_value().
		'attrs': HTML attributes to be set on the rendered widget. The combination of the attrs attribute and the attrs argument.
		'template_name': The value of self.template_name.
	3. more : <https://docs.djangoproject.com/en/2.2/ref/forms/widgets/#styling-widget-instances>

# BUILT IN FIELD CLASSES

refer < https://docs.djangoproject.com/en/2.2/ref/forms/fields/ > for the default widgets and all

Important : 

	1. BooleanField
	2. CharField
	3. ChoiceField
	4. DateField
	5. DateTimeField
	6. DecimalField
	7. IntegerField
	8. MultipleChoiceField
	9. MultiValuedField
	10. SplitDateTimeField

# TEXT WIDGETS

1. TextInput
2. NumberInput
3. EmailInput
4. PasswordInput
5. URLInput
6. HiddenInput
7. DateInput
8. DateTimeInput
9. TextArea

# SELECT AND CHECKBOX INPUT WIDGETS

1. CheckboxInput
2. Select
3. SelectMultiple
4. RadioSelect
5. CheckboxSelectMultiple