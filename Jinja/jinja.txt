--- Jinja notes from documentation --- 

+ A Jinja template is simply a text file. Jinja can generate any text-based
format (HTML, XML, CSV, LaTeX, etc.). A Jinja template doesn’t need to have a
specific extension: .html, .xml, or any other extension is just fine.

+ A template contains variables and/or expressions, which get replaced with
values when a template is rendered; and tags, which control the logic of the
template. The template syntax is heavily inspired by Django and Python.

There are a few kinds of delimiters. The default Jinja delimiters are configured as follows:

	{% ... %} for Statements
	{{ ... }} for Expressions to print to the template output
	{# ... #} for Comments not included in the template output
	#  ... ## for Line Statements

# VARIABLES 

+ Template variables are defined by the context dictionary passed to the template.

+ You can use a dot (.) to access attributes of a variable in addition to the
standard Python __getitem__ “subscript” syntax ([]).

+ To reference a variable in a statement just use its name

+ To print a variable use the {{ }} operator 

+ The dot (.) first checks for an attribute then a value but the subscript
first checks for an attached value then a attribute.

# WHITESPACE CONTROL

+ With both trim_blocks and lstrip_blocks enabled, you can put block tags on
their own lines, and the entire block line will be removed when rendered,
preserving the whitespace of the contents. 

+ The blocks if on a separate line will be included in the output and hence
may need to be stripped putting a plus (+) at the beginning of a statement inside
the bracket right after the %.

+ You can also strip whitespace in templates by hand. If you add a minus sign
(-) to the start or end of a block (e.g. a For tag), a comment, or a variable
expression, the whitespaces before or after that block will be removed 

# ESCAPING

+ The easiest way to output a literal variable delimiter ({{) is by using a
variable expression:

	{{ 		'{{' 	}}

+ For bigger sections, it makes sense to mark a block raw: 

	{% raw %}

		{{ item }} {# ignored by jinja #}

	{% endraw %} 

# TEMPLATE INHERITANCE

+ The most powerful part of Jinja is template inheritance. Template
inheritance allows you to build a base “skeleton” template that contains all
the common elements of your site and defines blocks that child templates can
override. 

+ The base template has blocks that may/may not have content in them. When a
child template extends the base template, all the blocks in the template
replace the respective blocks in the base template. If a block in the base is
not redefined by any block in the base, then it remains as it is else it is
replaced completely.

ex. 

	Base : 

	<!DOCTYPE html>
	<html lang="en">
	<head>
	    {% block head %}
	    <link rel="stylesheet" href="style.css" />
	    <title>{% block title %}{% endblock %} - My Webpage</title>
	    {% endblock %}
	</head>
	<body>
	    <div id="content">{% block content %}{% endblock %}</div>
	    <div id="contenttwo">{% block contentwot %}{% endblock %}</div>
	    <div id="footer">
	        {% block footer %}
	        &copy; Copyright 2008 by <a href="http://domain.invalid/">you</a>.
	        {% endblock %}
	    </div>
	</body>
	</html>

	Child1 : 

	{% extends "base.html" %}
	{% block title %}Index{% endblock %}
	{% block head %}
	    {{ super() }}
	    <style type="text/css">
	        .important { color: #336699; }
	    </style>
	{% endblock %}
	{% block content %}
	    <h1>Index</h1>
	    <p class="important">
	      Welcome to my awesome homepage.
	    </p>
	{% endblock %}
	{# notice how footer and contenttwo are not defined #}\

	Child 2 : 

	{% extends "base.html" %} 
	{% block contenttwo %}
	<p> more content </p>
	{% endblock %}

+ If you want a particular block to be used in multiple places in the base
template, you cant use the same name twice. Instead, you can make use of the
special 'self' variable.

ex. 

	<title>{% block title %}{% endblock %}</title>
	<h1>{{ self.title() }}</h1>

+ It’s possible to render the contents of the parent block by calling super.
This gives back the results of the parent block

ex. 
	{% block main %}
		{% block sidebar %}
		    <h3>Table Of Contents</h3>
		    ...
		    {{ super() }}
		{% endblock %}
	{% endblock %}

+ Jinja2 allows you to put the name of the block after the end tag for better
readability

ex. 

	{% block sidebar %}
	    {% block inner_sidebar %}
	        ...
	    {% endblock inner_sidebar %}
	{% endblock sidebar %}

# BLOCK SCOPE

+ Blocks can be nested for more complex layouts. However, per default blocks
may not access variables from outer scopes

ex. 

	{% for item in seq %}
	    <li>{% block loop_item %}{{ item }}{% endblock %}</li>
	{% endfor %}
	{# here item is unavailable inside block loop_item #}

+ you can explicitly specify that variables are available in a block by
setting the block to “scoped” by adding the scoped modifier to a block
declaration

ex.

	{% for item in seq %}
	    <li>{% block loop_item scoped %}{{ item }}{% endblock %}</li>
	{% endfor %}

# CONTROL STRUCTURES 

## FOR LOOP

ex. 

	{% for user in users %}
	  <li>{{ user.username }}</li>
	{% endfor %}

+ Special variables in for loop block: 

loop.index			The current iteration of the loop. (1 indexed)
loop.index0		The current iteration of the loop. (0 indexed)
loop.revindex		The number of iterations from the end of the loop (1 indexed)
loop.revindex0	The number of iterations from the end of the loop (0 indexed)
loop.first				True if first iteration.
loop.last				True if last iteration.
loop.length			The number of items in the sequence.
loop.cycle			A helper function to cycle between a list of sequences. See the explanation below.
loop.depth			Indicates how deep in a recursive loop the rendering currently is. Starts at level 1
loop.depth0		Indicates how deep in a recursive loop the rendering currently is. Starts at level 0
loop.previtem	The item from the previous iteration of the loop. Undefined during the first iteration.
loop.nextitem		The item from the following iteration of the loop. Undefined during the last iteration.

+ Within a for-loop, it’s possible to cycle among a list of strings/variables
each time through the loop by using the special loop.cycle

ex. 

	{% for row in rows %}
	    <li class="{{ loop.cycle('odd', 'even') }}">{{ row }}</li>
	{% endfor %}

+ Unlike in Python, it’s not possible to break or continue in a loop. You can,
however, filter the sequence during iteration, which allows you to skip items.
( Refer filter section in docs )

+ If no iteration took place because the sequence was empty or the filtering
removed all the items from the sequence, you can render a default block by
using else

ex. 

	<ul>
	{% for user in users %}
	    <li>{{ user.username|e }}</li>
	{% else %}
	    <li><em>no users found</em></li>
	{% endfor %}
	</ul>

+ If all you want to do is check whether some value has changed since the last
iteration or will change in the next iteration, you can use previtem and
nextitem

ex. 

	{% for value in values %}
	    {% if loop.previtem is defined and value > loop.previtem %}
	        The value just increased!
	    {% endif %}
	    {{ value }}
	    {% if loop.nextitem is defined and loop.nextitem > value %}
	        The value will increase even more!
	    {% endif %}
	{% endfor %} 

## IF AND ELSE

ex. 

	{% if kenny.sick %}
	{% elif kenny.dead %}
	{% else %}
	{% endif %}

## MACROS 

+ Macros are comparable with functions in regular programming languages. They
are useful to put often used idioms into reusable functions to not repeat
yourself (“DRY”).

ex. 

	{% macro input(name, value='', type='text', size=20) -%}
	    <input type="{{ type }}" name="{{ name }}" value="{{
	        value|e }}" size="{{ size }}">
	{%- endmacro %}

	<p>{{ input('username') }}</p>
	<p>{{ input('password', type='password') }}</p>

## CALL

+ In some cases it can be useful to pass a macro to another macro. For this
purpose, you can use the special call block

ex. 

	{% macro render_dialog(title, class='dialog') -%}
	    <div class="{{ class }}">
	        <h2>{{ title }}</h2>
	        <div class="contents">
	            {{ caller() }}
	        </div>
	    </div>
	{%- endmacro %}

	{% call render_dialog('Hello World') %}
	    This is a simple dialog rendered by using a macro and
	    a call block.
	{% endcall %}

+ It’s also possible to pass arguments back to the call block. This makes it
useful as a replacement for loops. Generally speaking, a call block works
exactly like a macro without a name.

ex. 

	{% macro dump_users(users) -%}
	    <ul>
	    {%- for user in users %}
	        <li><p>{{ user.username|e }}</p>{{ caller(user) }}</li>
	    {%- endfor %}
	    </ul>
	{%- endmacro %}

	{% call(user) dump_users(list_of_user) %}
	    <dl>
	        <dl>Realname</dl>
	        <dd>{{ user.realname|e }}</dd>
	        <dl>Description</dl>
	        <dd>{{ user.description }}</dd>
	    </dl>
	{% endcall %}

## FILTERS 

+ Filter sections allow you to apply regular Jinja2 filters on a block of
template data. Just wrap the code in the special filter section

ex. 

	{% filter upper %}
	    This text becomes uppercase
	{% endfilter %}

# ASSIGNMENTS

+ Inside code blocks, you can also assign values to variables

ex. 

	{% set navigation = [('index.html', 'Index'), ('about.html', 'About')] %}
	{% set key,value = function() %}

# INCLUDE 

+ The include statement is useful to include a template and return the
rendered contents of that file into the current namespace

ex 

	{% include 'header.html' %}
	    Body
	{% include 'footer.html' %}

