+ Context provides a way to pass data through the component tree without having to pass props down manually at every level. In a typical React application, data is passed top-down (parent to child) via props, but this can be cumbersome for certain types of props (e.g. locale preference, UI theme) that are required by many components within an application. Context provides a way to share values like these between components without having to explicitly pass a prop through every level of the tree.

+ Context is designed to share data that can be considered “global” for a tree of React components, such as the current authenticated user, theme, or preferred language.

[[
	class App extends React.Component {
	  render() {
	    return <Toolbar theme="dark" />;
	  }
	}

	function Toolbar(props) {
	  // The Toolbar component must take an extra "theme" prop
	  // and pass it to the ThemedButton. This can become painful
	  // if every single button in the app needs to know the theme
	  // because it would have to be passed through all components.
	  return (
	    <div>
	      <ThemedButton theme={props.theme} />
	    </div>
	  );
	}

	class ThemedButton extends React.Component {
	  render() {
	    return <Button theme={this.props.theme} />;
	  }
	}

	// Context lets us pass a value deep into the component tree
	// without explicitly threading it through every component.
	// Create a context for the current theme (with "light" as the default).
	const ThemeContext = React.createContext('light');

	class App extends React.Component {
	  render() {
	    // Use a Provider to pass the current theme to the tree below.
	    // Any component can read it, no matter how deep it is.
	    // In this example, we're passing "dark" as the current value.
	    return (
	      <ThemeContext.Provider value="dark">
	        <Toolbar />
	      </ThemeContext.Provider>
	    );
	  }
	}

	// A component in the middle doesn't have to
	// pass the theme down explicitly anymore.
	function Toolbar(props) {
	  return (
	    <div>
	      <ThemedButton />
	    </div>
	  );
	}

	class ThemedButton extends React.Component {
	  // Assign a contextType to read the current theme context.
	  // React will find the closest theme Provider above and use its value.
	  // In this example, the current theme is "dark".
	  static contextType = ThemeContext;
	  render() {
	    return <Button theme={this.context} />;
	  }
	}
]]

 + Context is primarily used when some data needs to be accessible by many components at different nesting levels. Apply it sparingly because it makes component reuse more difficult. 

 + However, sometimes the same data needs to be accessible by many components in the tree, and at different nesting levels. Context lets you “broadcast” such data, and changes to it, to all components below.

 # CONTEXT API

 1. React.createContext

 [[ const MyContext = React.createContext(defaultValue); ]]

 + Creates a Context object. When React renders a component that subscribes to this Context object it will read the current context value from the closest matching Provider above it in the tree.

 + The defaultValue argument is only used when a component does not have a matching Provider above it in the tree.

 2. Context.Provider

 [[ <MyContext.Provider value={/* some value */}> ]]

 + Every Context object comes with a Provider React component that allows consuming components to subscribe to context changes.

 + Accepts a value prop to be passed to consuming components that are descendants of this Provider. One Provider can be connected to many consumers. Providers can be nested to override values deeper within the tree.

+ All consumers that are descendants of a Provider will re-render whenever the Provider’s value prop changes.

3. Class.contextType

+ The contextType property on a class can be assigned a Context object created by React.createContext(). This lets you consume the nearest current value of that Context type using this.context. You can reference this in any of the lifecycle methods including the render function.

[[
	class MyClass extends React.Component {
	  componentDidMount() {
	    let value = this.context;
	    /* perform a side-effect at mount using the value of MyContext */
	  }
	  componentDidUpdate() {
	    let value = this.context;
	    /* ... */
	  }
	  componentWillUnmount() {
	    let value = this.context;
	    /* ... */
	  }
	  render() {
	    let value = this.context;
	    /* render something based on the value of MyContext */
	  }
	}
	MyClass.contextType = MyContext;

	// or 

	class ThemedButton extends React.Component {
	  static contextType = ThemeContext;
	  render() {
	    return <Button theme={this.context} />;
	  }
]]

4. Context.Consumer

[[
	<MyContext.Consumer>
	  {value => /* render something based on the context value */}
	</MyContext.Consumer>
]]

+ Requires a function as a child. The function receives the current context value and returns a React node. The value argument passed to the function will be equal to the value prop of the closest Provider for this context above in the tree. If there is no Provider for this context above, the value argument will be equal to the defaultValue that was passed to createContext().

[[
	const ThemeContext = React.createContext(null);
	class C extends React.Component {
	  render() {
	    return (
	      <ThemeContext.Consumer>
	        {coloredTheme =>
	          <div style={{ color: coloredTheme }}>
	            Hello World
	          </div>
	        }
	      </ThemeContext.Consumer>
	    );
	  }
	}
]]

# EXAMPLE

[[
	// theme-context.js


	export const themes = {
	  light: {
	    foreground: '#000000',
	    background: '#eeeeee',
	  },
	  dark: {
	    foreground: '#ffffff',
	    background: '#222222',
	  },
	};

	export const ThemeContext = React.createContext(
	  themes.dark // default value
	);


	// themed-button.js


	import {ThemeContext} from './theme-context';

	class ThemedButton extends React.Component {
	  render() {
	    let props = this.props;
	    let theme = this.context;
	    return (
	      <button
	        {...props}
	        style={{backgroundColor: theme.background}}
	      />
	    );
	  }
	}
	ThemedButton.contextType = ThemeContext;

	export default ThemedButton;


	// app.js


	import {ThemeContext, themes} from './theme-context';
	import ThemedButton from './themed-button';

	// An intermediate component that uses the ThemedButton
	function Toolbar(props) {
	  return (
	    <ThemedButton onClick={props.changeTheme}>
	      Change Theme
	    </ThemedButton>
	  );
	}

	class App extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      theme: themes.light,
	    };

	    this.toggleTheme = () => {
	      this.setState(state => ({
	        theme:
	          state.theme === themes.dark
	            ? themes.light
	            : themes.dark,
	      }));
	    };
	  }

	  render() {
	    // The ThemedButton button inside the ThemeProvider
	    // uses the theme from state while the one outside uses
	    // the default dark theme
	    return (
	      <Page>
	        <ThemeContext.Provider value={this.state.theme}>
	          <Toolbar changeTheme={this.toggleTheme} />
	        </ThemeContext.Provider>
	        <Section>
	          <ThemedButton />
	        </Section>
	      </Page>
	    );
	  }
	}

	ReactDOM.render(<App />, document.root);
]]

# UPDATING CONTEXT FROM A NESTED COMPONENT

+ It is often necessary to update the context from a component that is nested somewhere deeply in the component tree. In this case you can pass a function down through the context to allow consumers to update the context.

[[
	// Make sure the shape of the default value passed to
	// createContext matches the shape that the consumers expect!
	const ThemeContext = React.createContext({
	  theme: themes.dark,
	  toggleTheme: () => {},
	});

	function ThemeTogglerButton() {
	  // The Theme Toggler Button receives not only the theme
	  // but also a toggleTheme function from the context
	  return (
	    <ThemeContext.Consumer>
	      {({theme, toggleTheme}) => (
	        <button
	          onClick={toggleTheme}
	          style={{backgroundColor: theme.background}}>
	          Toggle Theme
	        </button>
	      )}
	    </ThemeContext.Consumer>
	  );
	}

	class App extends React.Component {
	  constructor(props) {
	    super(props);

	    this.toggleTheme = () => {
	      this.setState(state => ({
	        theme:
	          state.theme === themes.dark
	            ? themes.light
	            : themes.dark,
	      }));
	    };

	    // State also contains the updater function so it will
	    // be passed down into the context provider
	    this.state = {
	      theme: themes.light,
	      toggleTheme: this.toggleTheme,
	    };
	  }

	  render() {
	    // The entire state is passed to the provider
	    return (
	      <ThemeContext.Provider value={this.state}>
	        <Content />
	      </ThemeContext.Provider>
	    );
	  }
	}

	function Content() {
	  return (
	    <div>
	      <ThemeTogglerButton />
	    </div>
	  );
	}

	ReactDOM.render(<App />, document.root);

]]

# CONSUMING MULTIPLE CONTEXTS

[[
	// Theme context, default to light theme
	const ThemeContext = React.createContext('light');

	// Signed-in user context
	const UserContext = React.createContext({
	  name: 'Guest',
	});

	class App extends React.Component {
	  render() {
	    const {signedInUser, theme} = this.props;

	    // App component that provides initial context values
	    return (
	      <ThemeContext.Provider value={theme}>
	        <UserContext.Provider value={signedInUser}>
	          <Layout />
	        </UserContext.Provider>
	      </ThemeContext.Provider>
	    );
	  }
	}

	function Layout() {
	  return (
	    <div>
	      <Sidebar />
	      <Content />
	    </div>
	  );
	}

	// A component may consume multiple contexts
	function Content() {
	  return (
	    <ThemeContext.Consumer>
	      {theme => (
	        <UserContext.Consumer>
	          {user => (
	            <ProfilePage user={user} theme={theme} />
	          )}
	        </UserContext.Consumer>
	      )}
	    </ThemeContext.Consumer>
	  );
	}
]]

# PREVENT UNINTENTIONAL RENDERS 

+ Because context uses reference identity to determine when to re-render, there are some gotchas that could trigger unintentional renders in consumers when a provider’s parent re-renders. 

[[
	class App extends React.Component {
	  render() {
	    return (
	      <Provider value={{something: 'something'}}>
	        <Toolbar />
	      </Provider>
	    );
	  }
	}
	// Provider re-renders because a new object is always created for value
]]

[[
	class App extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      value: {something: 'something'},
	    };
	  }

	  render() {
	    return (
	      <Provider value={this.state.value}>
	        <Toolbar />
	      </Provider>
	    );
	  }
	}
	// Toolbar no longer re-renders 
]]