+ Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed. Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree below them.

+ They do not catch errors for :

	1. Event handlers
	2. Asychronous code
	3. Server Side rendering
	4. Erros in the error boundary itself

+ A class component becomes an error boundary if it defines either (or both) of the lifecycle methods static getDerivedStateFromError() or componentDidCatch(). Use static getDerivedStateFromError() to render a fallback UI after an error has been thrown. Use componentDidCatch() to log error information.

1. static getDerivedStateFromError()

	+ This lifecycle is invoked after an error has been thrown by a descendant component. It receives the error that was thrown as a parameter and should return a value to update state.

	[[
		static getDerivedStateFromError(error) {
		  // Update state so the next render will show the fallback UI.
		  return { hasError: true };
		}
	]]

2. componentDidCatch()

	+ This lifecycle is invoked after an error has been thrown by a descendant component. It receives two parameters. The first is the error that was thrown, and the second is the error info which is an object with a 'componentStack' key containing information about which component threw the error.

[[
	class ErrorBoundary extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = { hasError: false };
	  }

	  static getDerivedStateFromError(error) {
	    // Update state so the next render will show the fallback UI.
	    return { hasError: true };
	  }

	  componentDidCatch(error, info) {
	    // You can also log the error to an error reporting service
	    logErrorToMyService(error, info);
	  }

	  render() {
	    if (this.state.hasError) {
	      // You can render any custom fallback UI
	      return <h1>Something went wrong.</h1>;
	    }

	    return this.props.children; 
	  }
	}

	// usage 

	<ErrorBoundary>
	  <MyWidget />
	</ErrorBoundary>

]]

+ If the boundary detects an error, everything inside the boundary will be removed and replaced with the fallback UI. Error boundaries only catch errors in the components below them in the tree.

+ Errors that were not caught by any error boundary will result in unmounting of the whole React component tree.

## FULL EXAMPLE

[[
	class ErrorBoundary extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = { error: null, errorInfo: null };
	  }
	  
	  componentDidCatch(error, errorInfo) {
	    // Catch errors in any components below and re-render with error message
	    this.setState({
	      error: error,
	      errorInfo: errorInfo
	    })
	    // You can also log error messages to an error reporting service here
	  }
	  
	  render() {
	    if (this.state.errorInfo) {
	      // Error path
	      return (
	        <div>
	          <h2>Something went wrong.</h2>
	          <details style={{ whiteSpace: 'pre-wrap' }}>
	            {this.state.error && this.state.error.toString()}
	            <br />
	            {this.state.errorInfo.componentStack}
	          </details>
	        </div>
	      );
	    }
	    // Normally, just render children
	    return this.props.children;
	  }  
	}

	class BuggyCounter extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = { counter: 0 };
	    this.handleClick = this.handleClick.bind(this);
	  }
	  
	  handleClick() {
	    this.setState(({counter}) => ({
	      counter: counter + 1
	    }));
	  }
	  
	  render() {
	    if (this.state.counter === 5) {
	      // Simulate a JS error
	      throw new Error('I crashed!');
	    }
	    return <h1 onClick={this.handleClick}>{this.state.counter}</h1>;
	  }
	}

	function App() {
	  return (
	    <div>
	      <p>
	        <b>
	          This is an example of error boundaries in React 16.
	          <br /><br />
	          Click on the numbers to increase the counters.
	          <br />
	          The counter is programmed to throw when it reaches 5. This simulates a JavaScript error in a component.
	        </b>
	      </p>
	      <hr />
	      <ErrorBoundary>
	        <p>These two counters are inside the same error boundary. If one crashes, the error boundary will replace both of them.</p>
	        <BuggyCounter />
	        <BuggyCounter />
	      </ErrorBoundary>
	      <hr />
	      <p>These two counters are each inside of their own error boundary. So if one crashes, the other is not affected.</p>
	      <ErrorBoundary><BuggyCounter /></ErrorBoundary>
	      <ErrorBoundary><BuggyCounter /></ErrorBoundary>
	    </div>
	  );
	}



	ReactDOM.render(
	  <App />,
	  document.getElementById('root')
	);
]]

# EVENT HANDLER EXCEPTION HANDLING

+ Error boundaries do not catch errors inside event handlers. If you need to catch an error inside event handler, use the regular JavaScript try / catch statement.

[[
	class MyComponent extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = { error: null };
	    this.handleClick = this.handleClick.bind(this);
	  }

	  handleClick() {
	    try {
	      // Do something that could throw
	    } catch (error) {
	      this.setState({ error });
	    }
	  }

	  render() {
	    if (this.state.error) {
	      return <h1>Caught an error.</h1>
	    }
	    return <div onClick={this.handleClick}>Click Me</div>
	  }
	}
]]