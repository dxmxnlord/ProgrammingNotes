+ Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.

[[  
	ReactDOM.createPortal(child, container) 
	// The first argument (child) is any renderable React child, such as an element, string, or fragment. The second argument (container) is a DOM element.
]]

# USAGE

[[
	// These two containers are siblings in the DOM
	const appRoot = document.getElementById('app-root');
	const modalRoot = document.getElementById('modal-root');

	// Let's create a Modal component that is an abstraction around
	// the portal API.
	class Modal extends React.Component {
	  constructor(props) {
	    super(props);
	    // Create a div that we'll render the modal into. Because each
	    // Modal component has its own element, we can render multiple
	    // modal components into the modal container.
	    this.el = document.createElement('div');
	  }

	  componentDidMount() {
	    // Append the element into the DOM on mount. We'll render
	    // into the modal container element (see the HTML tab).
	    modalRoot.appendChild(this.el);
	  }

	  componentWillUnmount() {
	    // Remove the element from the DOM when we unmount
	    modalRoot.removeChild(this.el);
	  }
	  
	  render() {
	    // Use a portal to render the children into the element
	    return ReactDOM.createPortal(
	      // Any valid React child: JSX, strings, arrays, etc.
	      this.props.children,
	      // A DOM element
	      this.el,
	    );
	  }
	}

	// The Modal component is a normal React component, so we can
	// render it wherever we like without needing to know that it's
	// implemented with portals.
	class App extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {showModal: false};
	    
	    this.handleShow = this.handleShow.bind(this);
	    this.handleHide = this.handleHide.bind(this);
	  }

	  handleShow() {
	    this.setState({showModal: true});
	  }
	  
	  handleHide() {
	    this.setState({showModal: false});
	  }

	  render() {
	    // Show a Modal on click.
	    // (In a real app, don't forget to use ARIA attributes
	    // for accessibility!)
	    const modal = this.state.showModal ? (
	      <Modal>
	        <div className="modal">
	          <div>
	            With a portal, we can render content into a different
	            part of the DOM, as if it were any other React child.
	          </div>
	          This is being rendered inside the #modal-container div.
	          <button onClick={this.handleHide}>Hide modal</button>
	        </div>
	      </Modal>
	    ) : null;

	    return (
	      <div className="app">
	        This div has overflow: hidden.
	        <button onClick={this.handleShow}>Show modal</button>
	        {modal}
	      </div>
	    );
	  }
	}

	ReactDOM.render(<App />, appRoot);


	// mkdir ~/virtualenvironmenthtml

	<div id="app-root"></div>
	<div id="modal-root"></div>
]]