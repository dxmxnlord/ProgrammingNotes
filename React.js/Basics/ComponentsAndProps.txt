+ Conceptually, components are like JavaScript functions. They accept arbitrary inputs (called “props”) and return React elements describing what should appear on the screen.

# FUNCTION AND CLASS COMPONENTS

+ The simplest way to define a component is to write a JavaScript function. This function is a valid React component because it accepts a single “props” (which stands for properties) object argument with data and returns a React element. We call such components “function components” because they are literally JavaScript functions. You can also use an ES6 class to define a component.

[[
	function Welcome(props) {
	  return <h1>Hello, {props.name}</h1>;
	}

	class Welcome extends React.Component {
	  render() {
	    return <h1>Hello, {this.props.name}</h1>;
	  }
	}
]]

+ To convert a function component to a class component :

	* Create an ES6 class, with the same name, that extends React.Component.

	* Add a single empty method to it called render().

	* Move the body of the function into the render() method.

	* Replace props with this.props in the render() body.

	* Delete the remaining empty function declaration.

# RENDERING A COMPONENT

+ React elements can reperesent DOM tags and user-defined components. When React sees an element representing a user-defined component, it passes JSX attributes to this component as a single object. We call this object “props”. Always start component names with a capital letter.

[[
	function Welcome(props) {
	  return <h1>Hello, {props.name}</h1>;
	}

	const element = <Welcome name="Sara" />;
	ReactDOM.render(
	  element,
	  document.getElementById('root')
	);
]]

# COMPONENT ABSTRACTION

+ Components can refer to other components in their output. This lets us use the same component abstraction for any level of detail. A button, a form, a dialog, a screen: in React apps, all those are commonly expressed as components. Don’t be afraid to split components into smaller components.

[[
	function Comment(props) {
	  return (
	    <div className="Comment">
	      <div className="UserInfo">
	        <img className="Avatar"
	          src={props.author.avatarUrl}
	          alt={props.author.name}
	        />
	        <div className="UserInfo-name">
	          {props.author.name}
	        </div>
	      </div>
	      <div className="Comment-text">
	        {props.text}
	      </div>
	      <div className="Comment-date">
	        {formatDate(props.date)}
	      </div>
	    </div>
	  );
	}

	// becomes

	function Avatar(props) {
	  return (
	    <img className="Avatar"
	      src={props.user.avatarUrl}
	      alt={props.user.name}
	    />

	  );
	}

	function UserInfo(props) {
	  return (
	    <div className="UserInfo">
	      <Avatar user={props.user} />
	      <div className="UserInfo-name">
	        {props.user.name}
	      </div>
	    </div>
	  );
	}

	function Comment(props) {
	  return (
	    <div className="Comment">
	      <UserInfo user={props.author} />
	      <div className="Comment-text">
	        {props.text}
	      </div>
	      <div className="Comment-date">
	        {formatDate(props.date)}
	      </div>
	    </div>
	  );
	}
]]

# PROPS ARE READ ONLY

+ All React components must act like pure functions with respect to their props. Pure functions do not attempt to change their inputs, and always return the same result for the same inputs.