+ React events are named using camelCase, rather than lowercase. With JSX you pass a function as the event handler, rather than a string.

[[
	<button onclick="activateLasers()">
	  Activate Lasers
	</button>
	// becomes
	<button onClick={activateLasers}>
	  Activate Lasers
	</button>
]]

+ Another difference is that you cannot return false to prevent default behavior in React. You must call preventDefault explicitly. 

[[
	<a href="#" onclick="console.log('The link was clicked.'); return false">
	  Click me
	</a>

	function ActionLink() {
	  function handleClick(e) {
	    e.preventDefault();
	    console.log('The link was clicked.');
	  }

	  return (
	    <a href="#" onClick={handleClick}>
	      Click me
	    </a>
	  );
	}

	// Here, e is a synthetic event. React defines these synthetic events according to the W3C spec, so you don’t need to worry about cross-browser compatibility. Ref SyntheticEvent API guide
]]

+ When using React you should generally not need to call addEventListener to add listeners to a DOM element after it is created. Instead, just provide a listener when the element is initially rendered. When you define a component using an ES6 class, a common pattern is for an event handler to be a method on the class.

+ You have to be careful about the meaning of this in JSX callbacks. In JavaScript, class methods are not bound by default. If you forget to bind this.handleClick and pass it to onClick, this will be undefined when the function is actually called.  Generally, if you refer to a method without () after it, such as onClick={this.handleClick}, you should bind that method. Arrow functions and normal functions are all bound. 

[[
	var car = { 
	    registrationNumber: "GA12345",
	    brand: "Toyota",

	    displayDetails: function(){
	        console.log(this.registrationNumber + " " + this.brand);
	    }
	}
	// The above will work perfectly fine as long as we use it this way:
	car.displayDetails(); // GA12345 Toyota
	// But what if we want to borrow a method?
	var myCarDetails =  car.displayDetails;
	myCarDetails();
	// Well, this won’t work as the “this” will be now assigned to the global context which doesn’t have neither the registrationNumber nor the brand property.
	var myCarDetails = car.displayDetails.bind(car); 
	myCarDetails(); // GA12345 Toyota
	// The bind() method creates a new function where “this” refers to the parameter in the parenthesis in the above case “car”. This way the bind() method enables calling a function with a specified “this” value.

	var car = { 
	    registrationNumber: "GA12345",
	    brand: "Toyota",

	    displayDetails: function(ownerName){
	        console.log(ownerName + ", this is your car: " + this.registrationNumber + " " + this.brand);
	    }
	}
	// Example of passing arguments with bind():
	var myCarDetails = car.displayDetails.bind(car, "Vivian"); // Vivian, this is your car: GA12345 Toyota
]]

Example :

[[
	class Toggle extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {isToggleOn: true};

	    // This binding is necessary to make `this` work in the callback
	    this.handleClick = this.handleClick.bind(this);
	  }

	  handleClick() {
	    this.setState(state => ({
	      isToggleOn: !state.isToggleOn
	    }));
	  }

	  render() {
	    return (
	      <button onClick={this.handleClick}>
	        {this.state.isToggleOn ? 'ON' : 'OFF'}
	      </button>
	    );
	  }
	}

	ReactDOM.render(
	  <Toggle />,
	  document.getElementById('root')
	);
]]

+ Passing arguments to the event handlers :

[[
	// Inside a loop it is common to want to pass an extra parameter to an event handler. For example, if id is the row ID, either of the following would work.
	<button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>
	<button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>
	// In both cases, the e argument representing the React event will be passed as a second argument after the ID. With an arrow function, we have to pass it explicitly, but with bind any further arguments are automatically forwarded.
]]

