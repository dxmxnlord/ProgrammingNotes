+ Keys help React identify which items have changed, are added, or are removed. Keys should be given to the elements inside the array to give the elements a stable identity. The best way to pick a key is to use a string that uniquely identifies a list item among its siblings. Most often you would use IDs from your data as keys. 

+ When you don’t have stable IDs for rendered items, you may use the item index as a key as a last resort. They don’t recommend using indexes for keys if the order of items may change. This can negatively impact performance and may cause issues with component state.

+ If you choose not to assign an explicit key to list items then React will default to using indexes as keys.

# EXTRACTING COMPONENTS FROM KEYS

+ Keys only make sense in the context of the surrounding array. 

[[
	// incorrect key usage

	function ListItem(props) {
	  const value = props.value;
	  return (
	    // Wrong! There is no need to specify the key here:
	    <li key={value.toString()}>
	      {value}
	    </li>
	  );
	}

	function NumberList(props) {
	  const numbers = props.numbers;
	  const listItems = numbers.map((number) =>
	    // Wrong! The key should have been specified here:
	    <ListItem value={number} />
	  );
	  return (
	    <ul>
	      {listItems}
	    </ul>
	  );
	}

	const numbers = [1, 2, 3, 4, 5];
	ReactDOM.render(
	  <NumberList numbers={numbers} />,
	  document.getElementById('root')
	);
]]

[[
	// correct key usage

	function ListItem(props) {
	  // Correct! There is no need to specify the key here:
	  return <li>{props.value}</li>;
	}

	function NumberList(props) {
	  const numbers = props.numbers;
	  const listItems = numbers.map((number) =>
	    // Correct! Key should be specified inside the array.
	    <ListItem key={number.toString()}
	              value={number} />

	  );
	  return (
	    <ul>
	      {listItems}
	    </ul>
	  );
	}

	const numbers = [1, 2, 3, 4, 5];
	ReactDOM.render(
	  <NumberList numbers={numbers} />,
	  document.getElementById('root')
	);
]]

+ Keys used within arrays should be unique among their siblings. However they don’t need to be globally unique. We can use the same keys when we produce two different arrays. Keys serve as a hint to React but they don’t get passed to your components. If you need the same value in your component, pass it explicitly as a prop with a different name.

# EMBEDDING map() in JSX

+ JSX allows embedding any expression in curly braces so we could inline the map() result. 

[[
	function NumberList(props) {
	  const numbers = props.numbers;
	  const listItems = numbers.map((number) =>
	    <ListItem key={number.toString()}
	              value={number} />

	  );
	  return (
	    <ul>
	      {listItems}
	    </ul>
	  );
	}

	// can be implemented as

	function NumberList(props) {
	  const numbers = props.numbers;
	  return (
	    <ul>
	      {numbers.map((number) =>
	        <ListItem key={number.toString()}
	                  value={number} />

	      )}
	    </ul>
	  );
	}
]]