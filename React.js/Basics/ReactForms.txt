+ This form has the default HTML form behavior of browsing to a new page when the user submits the form. If you want this behavior in React, it just works. But in most cases, it’s convenient to have a JavaScript function that handles the submission of the form and has access to the data that the user entered into the form. The standard way to achieve this is with a technique called “controlled components”.

# CONTROLLED COMPONENTS

+ In HTML, form elements such as <input>, <textarea>, and <select> typically maintain their own state and update it based on user input. In React, mutable state is typically kept in the state property of components, and only updated with setState().

+ We can combine the two by making the React state be the “single source of truth”. Then the React component that renders a form also controls what happens in that form on subsequent user input. An input form element whose value is controlled by React in this way is called a “controlled component”.

[[
	class NameForm extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {value: ''};

	    this.handleChange = this.handleChange.bind(this);
	    this.handleSubmit = this.handleSubmit.bind(this);
	  }

	  handleChange(event) {
	    this.setState({value: event.target.value});
	  }

	  handleSubmit(event) {
	    alert('A name was submitted: ' + this.state.value);
	    event.preventDefault();
	  }

	  render() {
	    return (
	      <form onSubmit={this.handleSubmit}>
	        <label>
	          Name:
	          <input type="text" value={this.state.value} onChange={this.handleChange} />
	        </label>
	        <input type="submit" value="Submit" />
	      </form>
	    );
	  }
	}
]]

+ With a controlled component, every state mutation will have an associated handler function. This makes it straightforward to modify or validate user input. 

[[
	handleChange(event) {
	  this.setState({value: event.target.value.toUpperCase()});
	}
]]

## TEXTAREA TAG

+ In HTML, a <textarea> element defines its text by its children. In React, a <textarea> uses a value attribute instead. This way, a form using a <textarea> can be written very similarly to a form that uses a single-line input.

[[
	class EssayForm extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      value: 'Please write an essay about your favorite DOM element.'
	    };

	    this.handleChange = this.handleChange.bind(this);
	    this.handleSubmit = this.handleSubmit.bind(this);
	  }

	  handleChange(event) {
	    this.setState({value: event.target.value});
	  }

	  handleSubmit(event) {
	    alert('An essay was submitted: ' + this.state.value);
	    event.preventDefault();
	  }

	  render() {
	    return (
	      <form onSubmit={this.handleSubmit}>
	        <label>
	          Essay:
	          <textarea value={this.state.value} onChange={this.handleChange} />
	        </label>
	        <input type="submit" value="Submit" />
	      </form>
	    );
	  }
	}
]]

## SELECT TAG

[[
	<select>
	  <option value="grapefruit">Grapefruit</option>
	  <option value="lime">Lime</option>
	  <option selected value="coconut">Coconut</option>
	  <option value="mango">Mango</option>
	</select>
]]

+ The option tag can take an attribute called 'selected' that is selected by default. React, instead of using this selected attribute, uses a value attribute on the root select tag. This is more convenient in a controlled component because you only need to update it in one place.

[[
	class FlavorForm extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {value: 'coconut'};

	    this.handleChange = this.handleChange.bind(this);
	    this.handleSubmit = this.handleSubmit.bind(this);
	  }

	  handleChange(event) {
	    this.setState({value: event.target.value});
	  }

	  handleSubmit(event) {
	    alert('Your favorite flavor is: ' + this.state.value);
	    event.preventDefault();
	  }

	  render() {
	    return (
	      <form onSubmit={this.handleSubmit}>
	        <label>
	          Pick your favorite flavor:
	          <select value={this.state.value} onChange={this.handleChange}>
	            <option value="grapefruit">Grapefruit</option>
	            <option value="lime">Lime</option>
	            <option value="coconut">Coconut</option>
	            <option value="mango">Mango</option>
	          </select>
	        </label>
	        <input type="submit" value="Submit" />
	      </form>
	    );
	  }
	}
]]

+ You can pass an array into the value attribute, allowing you to select multiple options in a select tag

## FILE INPUT TAG

+ In HTML, an <input type="file"> lets the user choose one or more files from their device storage to be uploaded to a server or manipulated by JavaScript via the File API. Because its value is read-only, it is an uncontrolled component in React.

# HANDLING MULTIPLE INPUTS

+ When you need to handle multiple controlled input elements, you can add a name attribute to each element and let the handler function choose what to do based on the value of event.target.name 

[[
	class Reservation extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {
	      isGoing: true,
	      numberOfGuests: 2
	    };

	    this.handleInputChange = this.handleInputChange.bind(this);
	  }

	  handleInputChange(event) {
	    const target = event.target;
	    const value = target.type === 'checkbox' ? target.checked : target.value;
	    const name = target.name;

	    this.setState({
	      [name]: value
	    });
	  }

	  render() {
	    return (
	      <form>
	        <label>
	          Is going:
	          <input
	            name="isGoing"
	            type="checkbox"
	            checked={this.state.isGoing}
	            onChange={this.handleInputChange} />
	        </label>
	        <br />
	        <label>
	          Number of guests:
	          <input
	            name="numberOfGuests"
	            type="number"
	            value={this.state.numberOfGuests}
	            onChange={this.handleInputChange} />
	        </label>
	      </form>
	    );
	  }
	}
]]

# CONTROLLED INPUT NULL VALUE

+ Specifying the value prop on a controlled component prevents the user from changing the input unless you desire so (by implementing a change handling function) . If you’ve specified a value but the input is still editable, you may have accidentally set value to undefined or null.

[[
	ReactDOM.render(<input value="hi" />, mountNode);

	setTimeout(function() {
	  ReactDOM.render(<input value={null} />, mountNode);
	}, 1000);
]]

