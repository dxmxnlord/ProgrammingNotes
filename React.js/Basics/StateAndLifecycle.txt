+ State is similar to props, but it is private and fully controlled by the component. Classes have states and lifecycles unlike function components. 

# ADDING A LOCAL STATE

+ The local state is referred by the this.state variable. It is created by a class constructor that assigns the initial this.state value. 

+ This state is an object which can be modified by the this.setState function. The only place where you can assign this.state is the constructor and the setState().

[[
	this.state = {date: new Date()};

	// doesnt have to include all the values; only the one's to change
	this.setState({
	      date: new Date()
	    });
]]

+ When you call setState(), React merges the object you provide into the current state. Then you can update them independently with separate setState() calls. The merging is shallow, so setState() changes only those keys that were passed to it and leaves the others intact. 

+ React may batch multiple setState() calls into a single update for performance. Because this.props and this.state may be updated asynchronously, you should not rely on their values for calculating the next state. Instead, use a second form of setState() that accepts a function rather than an object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument.

[[
	// Wrong
	this.setState({
	  counter: this.state.counter + this.props.increment,
	});

	// Correct
	this.setState((state, props) => ({
	  counter: state.counter + props.increment
	}));
]]

+ This is why state is often called local or encapsulated. It is not accessible to any component other than the one that owns and sets it. This is why state is often called local or encapsulated. It is not accessible to any component other than the one that owns and sets it. A component may choose to pass its state down as props to its child components.

# ADDING LIFECYCLE METHODS TO A CLASS

+ In applications with many components, itâ€™s very important to free up resources taken by the components when they are destroyed. When a component is rendered to the DOM for the first time it's called "mounting" when it's removed it's called "unmounting". For mounting the function componentDidMount() is used. The componentDidMount() method runs after the component output has been rendered to the DOM. Similarily, the componentWillUnmount() method runs after the component output has been deleted from the DOM. 

+ In the componentDidMount() you can add interval functions that will alter the component so the react DOM will re-render the component without calling the ReactDOM.render() multiple times. componentWillUnount() can clear the timer.

[[
	class Clock extends React.Component {
	  constructor(props) {
	    super(props);
	    this.state = {date: new Date()};
	  }

	  // handles the component change
	  componentDidMount() {
	    this.timerID = setInterval(
	      () => this.tick(),
	      1000
	    );
	  }

	  componentWillUnmount() {
	    clearInterval(this.timerID);
	  }

	  // handles state change
	  tick() {
	    this.setState({
	      date: new Date()
	    });
	  }

	  render() {
	    return (
	      <div>
	        <h1>Hello, world!</h1>
	        <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
	      </div>
	    );
	  }
	}

	// called once
	ReactDOM.render(
	  <Clock />,
	  document.getElementById('root')
	);
]]

# CHANGING STATE MULTIPLE TIMES WITH THE SAME CALL

+ The function below combines all the calls into one and updates state once, this is the default react behaviour.

[[
	[[
		class Count extends Component {
		    constructor() {
		        super()
		        this.state = {
		            count: 0
		        }
		    }

		    changeMessage() {
		        this.setState(
		        	{count : prevState.count + 1},
		            ()=> {
		                console.log(this.state.count)
		            }
		        )
		    }
		    increment() {
		        this.changeMessage()
		        this.changeMessage()
		        this.changeMessage()
		        this.changeMessage()
		    }
		    render() {
		        return (
		            <div>
		                <h1>count</h1> - {this.state.count}
		                <button onClick={() => this.increment()}
		                >Submit</button>
		            </div>
		        )
		    }
		}
	]]
]]

+ Updating state through a arrow function with state as the first parameter behaves normally 

[[
	class Count extends Component {
	    constructor() {
	        super()
	        this.state = {
	            count: 0
	        }
	    }

	    changeMessage() {
	        this.setState(
	            (prevState)=>({
	                count : prevState.count + 1
	            })
	            ,
	            ()=> {
	                console.log(this.state.count)
	            }
	        )
	    }
	    increment() {
	        this.changeMessage()
	        this.changeMessage()
	        this.changeMessage()
	        this.changeMessage()
	    }
	    render() {
	        return (
	            <div>
	                <h1>count</h1> - {this.state.count}
	                <button onClick={() => this.increment()}
	                >Submit</button>
	            </div>
	        )
	    }
	}
]]