// app()

# ASSOCIATED PROPERTIES %

1. mountpath : 

	+ The app.mountpath property contains one or more path patterns on which a sub-app was mounted.
	+ A sub-app is an instance of express that may be used for handling the request to a route.

		[[
			const express = require('express')

			const app = express() // the main app
			const admin = express() // the sub app

			admin.get('/', function (req, res) {
			  console.log(admin.mountpath) // /admin
			  res.send('Admin Homepage')
			})

			app.use('/admin', admin) // mount the sub app
		]]

2. locals :

	+ The app.locals object has properties that are local variables within the application.

	+ You can access local variables in templates rendered within the application. This is useful for providing helper functions to templates, as well as application-level data. Local variables are available in middleware via req.app.locals (see req.app)

	[[
		app.locals.title = 'My App'
		app.locals.strftime = require('strftime')
		app.locals.email = 'me@myapp.com'
	]]

# ASSOCIATED FUNCTIONS %

1. listen() :

	+ Binds and listens for connections on the specified host and port. 
	+ If port is omitted or is 0, the operating system will assign an arbitrary unused port, which is useful for cases like automated tasks (tests, etc.).

	+ The app returned by express() is in fact a JavaScript Function, designed to be passed to Nodeâ€™s HTTP servers as a callback to handle requests. This makes it easy to provide both HTTP and HTTPS versions of your app with the same code base.

		[[
			const express = require('express')
			const https = require('https')
			const http = require('http')
			const app = express()

			http.createServer(app).listen(80)
			https.createServer(options, app).listen(443)
		]]

	+ The app.listen() method returns an http.Server object and (for HTTP) is a convenience method for the following:

		[[
			app.listen = function () {
			  var server = http.createServer(this)
			  return server.listen.apply(server, arguments)
			}
		]]

2. use() : 

	+ Mounts the specified middleware function or functions at the specified path: the middleware function is executed when the base of the requested path matches path.