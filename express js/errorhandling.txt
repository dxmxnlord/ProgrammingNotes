+ Error Handling refers to how Express catches and processes errors that occur both synchronously and asynchronously. Express comes with a default error handler so you donâ€™t need to write your own to get started.

# CATCHING ERRORS

+ Errors that occur in synchronous code inside route handlers and middleware require no extra work. If synchronous code throws an error, then Express will catch and process it

[[
	app.get('/', function (req, res) {
	  throw new Error('BROKEN') // Express will catch this on its own.
	})
]]

+ For errors returned from asynchronous functions invoked by route handlers and middleware, you must pass them to the next() function, where Express will catch and process them.

[[
	app.get('/', function (req, res, next) {
	  fs.readFile('/file-does-not-exist', function (err, data) {
	    if (err) {
	      next(err) // Pass errors to Express.
	    } else {
	      res.send(data)
	    }
	  })
	})
]]

+ If you pass anything to the next() function (except the string 'route'), Express regards the current request as being an error and will skip any remaining non-error handling routing and middleware functions.

[[
	// In the above example next is provided as the callback for fs.writeFile, which is called with or without errors. If there is no error the second handler is executed, otherwise Express catches and processes the error.
	app.get('/', [
	  function (req, res, next) {
	    fs.writeFile('/inaccessible-path', 'data', next)
	  },
	  function (req, res) {
	    res.send('OK')
	  }
	])
]]

+ You must catch errors that occur in asynchronous code invoked by route handlers or middleware and pass them to Express for processing.

[[
	// uses a try...catch block to catch errors in the asynchronous code and pass them to Express. If the try...catch block were omitted, Express would not catch the error since it is not part of the synchronous handler code.
	app.get('/', function (req, res, next) {
	  setTimeout(function () {
	    try {
	      throw new Error('BROKEN')
	    } catch (err) {
	      next(err)
	    }
	  }, 100)
	})

	// Use promises to avoid the overhead of the try..catch block or when using functions that return promises
	app.get('/', function (req, res, next) {
	  Promise.resolve().then(function () {
	    throw new Error('BROKEN')
	  }).catch(next) // Errors will be passed to Express.
	})
]]

# THE DEFAULT ERROR HANDLER

+ Express comes with a built-in error handler that takes care of any errors that might be encountered in the app. This default error-handling middleware function is added at the end of the middleware function stack.

+ If you pass an error to next() and you do not handle it in a custom error handler, it will be handled by the built-in error handler; the error will be written to the client with the stack trace. The stack trace is not included in the production environment. ( Set the environment variable NODE_ENV to production, to run the app in production mode. )

+ If you call next() with an error after you have started writing the response (for example, if you encounter an error while streaming the response to the client) the Express default error handler closes the connection and fails the request.

+ Note that the default error handler can get triggered if you call next() with an error in your code more than once, even if custom error handling middleware is in place.

# WRITING CUSTOM ERROR HANDLERS

+ Define error-handling middleware functions in the same way as other middleware functions, except error-handling functions have four arguments instead of three: (err, req, res, next).

[[
	app.use(function (err, req, res, next) {
	  console.error(err.stack)
	  res.status(500).send('Something broke!')
	})
]]