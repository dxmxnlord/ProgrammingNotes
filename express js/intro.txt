+ express is a webframework based on node js. It is an additional layer to node js that provides routing. 

# INSTALLING

$ mkdir appname
$ cd appname
$ npm init
$ npm install express --save
$ npm install nodemon --save-dev
/ create the express file
/ add "nodemon ./file" to the scripts in package.json
$ npm run `nodemon-script`

# HELLO WORLD

+ each app is an instance of `express()` 

[[
	const express = require('express')
	const app = express()
	const port = 3000
	// define a route and callback to perform when a request is sent
	app.get('/', (req, res) => res.send('Hello World!'))
	// start listening for requests 
	app.listen(port, () => console.log(`Example app listening on port ${port}!`))
]] 

# BASIC ROUTING

+ Routing refers to determining how an application responds to a client request to a particular endpoint, which is a URI (or path) and a specific HTTP request method. Each route can have one or more handler functions, which are executed when the route is matched.

+ each route takes the definition: 

	< app.METHOD(PATH, HANDLER) >

		++ app is an instance of express.
		++ METHOD is an HTTP request method, in lowercase.
		++ PATH is a path on the server.
		++ HANDLER is the function executed when the route is matched.

[[
	app.get('/', function (req, res) {
	  res.send('Hello World!')
	})

	// Respond to POST request on the root route (/), the application’s home page:
	app.post('/', function (req, res) {
	  res.send('Got a POST request')
	})

	// Respond to a PUT request to the /user route:
	app.put('/user', function (req, res) {
	  res.send('Got a PUT request at /user')
	})

	// Respond to a DELETE request to the /user route:
	app.delete('/user', function (req, res) {
	  res.send('Got a DELETE request at /user')
	})
]]

# SERVING STATIC FILES

+ To serve static files such as images, CSS files, and JavaScript files, use the express.static built-in middleware function in Express. The function signature is like :
	
	express.static(root, [options])
		++ The root argument specifies the root directory from which to serve static assets

[[
	// For example, use the following code to serve images, CSS files, and JavaScript files in a directory named public:

	app.use(express.static('public'))

	// Now, you can load the files that are in the public directory:

	http://localhost:3000/images/kitten.jpg
	http://localhost:3000/css/style.css
	http://localhost:3000/js/app.js
	http://localhost:3000/images/bg.png
	http://localhost:3000/hello.html
]]

[[
	To use multiple static assets directories, call the express.static middleware function multiple times:

	app.use(express.static('public'))
	app.use(express.static('files'))
]]

+ Express looks up the files in the order in which you set the static directories with the express.static middleware function.

+ To create a virtual path prefix (where the path does not actually exist in the file system) for files that are served by the express.static function, specify a mount path for the static directory

[[
	app.use('/static', express.static('public'))

	// Now, you can load the files that are in the public directory from the /static path prefix.

	http://localhost:3000/static/images/kitten.jpg
	http://localhost:3000/static/css/style.css
	http://localhost:3000/static/js/app.js
	http://localhost:3000/static/images/bg.png
	http://localhost:3000/static/hello.html
]]

+ However, the path that you provide to the express.static function is relative to the directory from where you launch your node process. If you run the express app from another directory, it’s safer to use the absolute path of the directory that you want to serve

[[
	app.use('/static', express.static(path.join(__dirname, 'public')))
]]